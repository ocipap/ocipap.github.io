{
    "componentChunkName": "component---node-modules-gatsby-theme-primer-wiki-src-templates-post-query-js",
    "path": "/programming/react-query/",
    "result": {"data":{"mdx":{"id":"38e8cb83-64f8-5c1f-b920-5bc102ecbe1e","tableOfContents":{"items":[{"url":"#개요","title":"개요"},{"url":"#ssr","title":"SSR"},{"url":"#react-query-는-동시에-나가는-요청의-중복을-제거한다","title":"react-query 는 동시에 나가는 요청의 중복을 제거한다."},{"url":"#usequery-의-isfetching-과-isloading-의-차이","title":"useQuery 의 isFetching 과 isLoading 의 차이"},{"url":"#stale-time-과-cache-time-의-차이","title":"Stale Time 과 Cache Time 의 차이"},{"url":"#stale-time-이-0인-이유","title":"Stale Time 이 0인 이유"},{"url":"#pre-fetching","title":"Pre Fetching"},{"url":"#usequery의-keeppreviousdata","title":"useQuery의 keepPreviousData"},{"url":"#mutation","title":"Mutation"},{"url":"#useinfinitequery","title":"useInfiniteQuery"},{"url":"#useisfetching","title":"useIsFetching"},{"url":"#default-error-handling","title":"Default Error Handling"},{"url":"#데이터를-미리-채우는-메서드-및-옵션들","title":"데이터를 미리 채우는 메서드 및 옵션들"},{"url":"#prefetchquery-를-이용해-미리-데이터-가져오기","title":"PrefetchQuery 를 이용해 미리 데이터 가져오기"},{"url":"#select-를-통해-가져온-데이터-커스텀하기","title":"select 를 통해 가져온 데이터 커스텀하기"},{"url":"#re-fetching-을-하는-이유와-시점","title":"Re-fetching 을 하는 이유와 시점"},{"url":"#re-fetching-을-피하는-방법","title":"Re-fetching 을 피하는 방법"},{"url":"#전역-refetch-option","title":"전역 refetch option"},{"url":"#queryclientsetquerydata","title":"queryClient.setQueryData"},{"url":"#queryclientgetquerydata","title":"queryClient.getQueryData"},{"url":"#getquerydata-vs-usequery","title":"getQueryData VS useQuery"},{"url":"#query-의-onsuccess-가-울리는-시점","title":"query 의 onSuccess 가 울리는 시점"},{"url":"#query-의-initialdata-를-이용해서-쿼리-인스턴스의-초기-데이터를-셋팅한다","title":"query 의 initialData 를 이용해서 쿼리 인스턴스의 초기 데이터를 셋팅한다."},{"url":"#query-의-enabled-옵션을-이용해서-의존성-쿼리-인스턴스를-만든다","title":"query 의 enabled 옵션을 이용해서 의존성 쿼리 인스턴스를 만든다."},{"url":"#queryclient-의-removequeries-는-쿼리-인스턴스를-제거한다","title":"queryClient 의 removeQueries 는 쿼리 인스턴스를 제거한다."},{"url":"#mutation-전역-에러-헨들링","title":"mutation 전역 에러 헨들링"},{"url":"#전역-mutation-loading-은-useismutating-을-사용한다","title":"전역 mutation loading 은 useIsMutating 을 사용한다."},{"url":"#usemutation-과-usequery-의-차이점","title":"useMutation 과 useQuery 의 차이점"},{"url":"#usemutatefunction의-제네릭","title":"UseMutateFunction의 제네릭"},{"url":"#usemutatefunction-사용-예시","title":"UseMutateFunction 사용 예시"},{"url":"#queryclientinvalidatequeries","title":"queryClient.invalidateQueries"},{"url":"#query-key-prefixes","title":"Query Key Prefixes"},{"url":"#onsuccess-로직에서-return-을-하면-await-처럼-동작한다","title":"onSuccess 로직에서 return 을 하면 await 처럼 동작한다."},{"url":"#infinitequery-에서는-invalidatequeries-가-동작하지-않는-것-같다","title":"infiniteQuery 에서는 invalidateQueries 가 동작하지 않는 것 같다."},{"url":"#mutate-와-usemutation-에-onsuccess-로직","title":"mutate 와 useMutation 에 onSuccess 로직"},{"url":"#usemutation-의-동작","title":"useMutation 의 동작"},{"url":"#onsuccess-의-인자","title":"onSuccess 의 인자"},{"url":"#usequery-사용시-isloading-과-data-유무를-전부-확인해야한다","title":"useQuery 사용시 isLoading 과 data 유무를 전부 확인해야한다."},{"url":"#optimistic-updates","title":"Optimistic Updates"},{"url":"#setlogger","title":"setLogger"},{"url":"#query-test-는-msw와-react-testing-library-를-사용한다","title":"Query Test 는 msw와 react-testing-library 를 사용한다."},{"url":"#mutate-는-onsuccess-는-해당-컴포넌트가-마운트가-해제되면-울리지-않는다","title":"mutate 는 onSuccess 는 해당 컴포넌트가 마운트가 해제되면 울리지 않는다."}]},"fields":{"title":"React Query","slug":"/programming/react-query/","url":"https://ocipap.github.io/programming/react-query/","editUrl":"","lastUpdatedAt":"2022-09-28T23:51:06.000Z","lastUpdated":"2022. 9. 28.","gitCreatedAt":"2022-04-18T16:10:18.000Z","shouldShowTitle":true},"frontmatter":{"title":"React Query","description":null,"imageAlt":null,"tags":["React"],"date":null,"dateModified":null,"language":null,"seoTitle":null,"image":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"React Query\",\n  \"tags\": [\"React\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"개요\"\n  }, \"\\uAC1C\\uC694\"), mdx(\"p\", null, \"\\uC11C\\uBC84 \\uC0C1\\uD0DC\\uC640 \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8 \\uC0C1\\uD0DC\\uB97C \\uBD84\\uB9AC\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uD074\\uB77C\\uC774\\uC5B8\\uD2B8\\uC5D0\\uC11C \\uAD00\\uB9AC\\uD558\\uB294 \\uC0C1\\uD0DC\\uB294 \\uADF8\\uB807\\uAC8C \\uB9CE\\uC9C0 \\uC54A\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"ssr\"\n  }, \"SSR\"), mdx(\"p\", null, \"queryClient \\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uC804\\uB2EC\\uD558\\uB294 \\uBC29\\uBC95\\uC744 \\uC0AC\\uC6A9\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"initialData \\uB97C \\uC774\\uC6A9\\uD558\\uB294 \\uBC29\\uBC95\")), mdx(\"h2\", {\n    \"id\": \"react-query-는-동시에-나가는-요청의-중복을-제거한다\"\n  }, \"react-query \\uB294 \\uB3D9\\uC2DC\\uC5D0 \\uB098\\uAC00\\uB294 \\uC694\\uCCAD\\uC758 \\uC911\\uBCF5\\uC744 \\uC81C\\uAC70\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"\\uAC01\\uAC01\\uC758 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uC5D0\\uC11C useQuery \\uB97C \\uC0AC\\uC6A9\\uD558\\uB354\\uB77C\\uB3C4, \\uB3D9\\uC77C\\uD55C \\uC694\\uCCAD\\uC5D0 \\uAD00\\uD574\\uC11C\\uB294 \\uC911\\uBCF5\\uC744 \\uC81C\\uAC70\\uD55C\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"usequery-의-isfetching-과-isloading-의-차이\"\n  }, \"useQuery \\uC758 isFetching \\uACFC isLoading \\uC758 \\uCC28\\uC774\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"isFetching\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCE90\\uC2DC\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC874\\uC7AC\\uD558\\uB294 \\uC0C1\\uD0DC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"query \\uD568\\uC218\\uAC00 \\uC544\\uC9C1 resolve \\uB418\\uC9C0 \\uC54A\\uC558\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"isLoading\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCE90\\uC2DC\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uACE0 + isFetching\")))), mdx(\"h2\", {\n    \"id\": \"stale-time-과-cache-time-의-차이\"\n  }, \"Stale Time \\uACFC Cache Time \\uC758 \\uCC28\\uC774\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \\uCFFC\\uB9AC \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 mount \\uB428\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB124\\uD2B8\\uC6CC\\uD06C\\uC5D0\\uC11C \\uB370\\uC774\\uD130 fetch \\uD558\\uACE0 A\\uB77C\\uB294 query key\\uB85C \\uCE90\\uC2F1\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774 \\uB370\\uC774\\uD130\\uB294\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fresh\"), \"\\xA0\\uC0C1\\uD0DC\\uC5D0\\uC11C\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"staleTime\"), \"(\\uAE30\\uBCF8\\uAC12 0) \\uC774\\uD6C4\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stale\"), \"\\xA0\\uC0C1\\uD0DC\\uB85C \\uBCC0\\uACBD\\uB428\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A \\uCFFC\\uB9AC \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 unmount \\uB428\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCE90\\uC2DC\\uB294\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cacheTime\"), \"(\\uAE30\\uBCF8\\uAC12 5min) \\uB9CC\\uD07C \\uC720\\uC9C0\\uB418\\uB2E4\\uAC00 \\uAC00\\uBE44\\uC9C0 \\uCF5C\\uB809\\uD130\\uB85C \\uC218\\uC9D1\\uB428 \\u2192 \\uC774\\uB54C \\uCE90\\uC2DC\\uB41C \\uB370\\uC774\\uD130\\uB3C4 \\uC0AC\\uB77C\\uC9D0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9CC\\uC77C\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cacheTime\"), \"\\uC774 \\uC9C0\\uB098\\uAE30 \\uC804\\uC5D0 A \\uCFFC\\uB9AC \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 \\uC0C8\\uB86D\\uAC8C mount\\uB418\\uBA74, fetch\\uAC00 \\uC2E4\\uD589\\uB418\\uACE0\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fresh\"), \"\\uD55C \\uAC12\\uC744 \\uAC00\\uC838\\uC624\\uB294 \\uB3D9\\uC548 \\uCE90\\uC2DC \\uB370\\uC774\\uD130\\uB97C \\uBCF4\\uC5EC\\uC90C\")), mdx(\"h3\", {\n    \"id\": \"상태별-특징\"\n  }, \"\\uC0C1\\uD0DC\\uBCC4 \\uD2B9\\uC9D5\"), mdx(\"p\", null, \"fresh \\uC0C1\\uD0DC\\uC5D0\\uC11C\\uB294 \\uC544\\uBB34\\uB9AC \\uC0C8\\uB86D\\uAC8C \\uB9C8\\uC6B4\\uD2B8\\uB97C \\uD574\\uB3C4 fetching \\uC774 \\uC77C\\uC5B4\\uB098\\uC9C0 \\uC54A\\uC74C\"), mdx(\"p\", null, \"fetching \\uC740 \\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC838\\uC624\\uB294 \\uC911\\uC778 \\uC0C1\\uD0DC \\u2192 \\uCE90\\uC2DC\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC788\\uC73C\\uBA74 \\uADF8 \\uB370\\uC774\\uD130\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uC74C\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Stale Time (\\uAE30\\uBCF8\\uAC12: 0)\")), mdx(\"p\", null, \"\\uB370\\uC774\\uD130\\uAC00 fresh \\uC5D0\\uC11C stale \\uAE4C\\uC9C0 \\uAC78\\uB9AC\\uB294 \\uC2DC\\uAC04\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Cache Time (\\uAE30\\uBCF8\\uAC12: 5min)\")), mdx(\"p\", null, \"\\uB370\\uC774\\uD130\\uAC00 inactive \\uC0C1\\uD0DC\\uC5D0\\uC11C Cache Time \\uB9CC\\uD07C \\uC720\\uC9C0\\uB41C \\uC774\\uD6C4\\uC5D0 \\uAC00\\uBE44\\uC9C0 \\uCF5C\\uB809\\uD130\\uB85C \\uC218\\uC9D1\\uB41C\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"stale-time-이-0인-이유\"\n  }, \"Stale Time \\uC774 0\\uC778 \\uC774\\uC720\"), mdx(\"p\", null, \"0\\uC73C\\uB85C \\uC124\\uC815\\uD568\\uC73C\\uB85C\\uC368 \\uC11C\\uBC84\\uC5D0\\uC11C \\uAC00\\uC838\\uC628 \\uB370\\uC774\\uD130\\uAC00 \\uD56D\\uC0C1 \\uC624\\uB798\\uB41C \\uB370\\uC774\\uD130\\uB77C\\uACE0 \\uC0DD\\uAC01\\uD558\\uB294 \\uAC83\\uC774 \\uB9DE\\uB2E4.\"), mdx(\"p\", null, \"\\uADF8\\uB798\\uC57C\\uC9C0 \\uD56D\\uC0C1 \\uCD5C\\uC2E0 \\uC0C1\\uD0DC\\uB97C \\uC720\\uC9C0\\uD560 \\uC218 \\uC788\\uAE30 \\uB54C\\uBB38\\uC774\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"pre-fetching\"\n  }, \"Pre Fetching\"), mdx(\"p\", null, \"\\uC880 \\uB354 \\uC88B\\uC740 UX \\uB97C \\uBCF4\\uC5EC\\uC8FC\\uAE30 \\uC704\\uD574 \\uB2E4\\uC74C\\uC5D0 \\uAC00\\uC838\\uC62C \\uB370\\uC774\\uD130\\uB97C \\uBBF8\\uB9AC \\uAC00\\uC838\\uC624\\uB294 \\uBC29\\uBC95\"), mdx(\"p\", null, \"queryClient \\uC758 prefetchQuery \\uB97C \\uC774\\uC6A9\\uD574\\uC11C \\uB2E4\\uC74C \\uB370\\uC774\\uD130\\uB97C \\uBBF8\\uB9AC \\uAC00\\uC838\\uC62C \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"useEffect(()=>{\\n  if(currentPage >= maxPostPage) {\\n    return;\\n  }\\n  const nextPage = currentPage + 1;\\n  queryClient.prefetchQuery([\\\"posts\\\",nextPage],()=> fetchPosts(nextPage))\\n},[currentPage,queryClient])\\n\")), mdx(\"h2\", {\n    \"id\": \"usequery의-keeppreviousdata\"\n  }, \"useQuery\\uC758 keepPreviousData\"), mdx(\"p\", null, \"useQuery \\uC758 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keepPreviousData\"), \" \\uC635\\uC158\\uC744 \\uD1B5\\uD574 \\uCFFC\\uB9AC\\uD0A4\\uAC00 \\uBCC0\\uACBD\\uB41C \\uACBD\\uC6B0 \\uC0C8 \\uB370\\uC774\\uD130\\uB97C \\uC694\\uCCAD\\uD558\\uB294 \\uB3D9\\uC548 \\uB9C8\\uC9C0\\uB9C9\\uC73C\\uB85C \\uC131\\uACF5\\uD55C \\uC694\\uCCAD\\uC758 \\uB370\\uC774\\uD130\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"mutation\"\n  }, \"Mutation\"), mdx(\"p\", null, \"\\uB124\\uD2B8\\uC6CC\\uD06C \\uD638\\uCD9C\\uC744 \\uD1B5\\uD574 \\uC11C\\uBC84\\uC758 \\uAC12\\uC744 \\uBCC0\\uACBD\\uD558\\uB294 \\uAC83\"), mdx(\"h2\", {\n    \"id\": \"useinfinitequery\"\n  }, \"useInfiniteQuery\"), mdx(\"p\", null, \"\\uBB34\\uD55C \\uC2A4\\uD06C\\uB864 \\uAD6C\\uD604\\uC744 \\uC880 \\uB354 \\uD3B8\\uD558\\uAC8C \\uD574\\uC8FC\\uB294 \\uCFFC\\uB9AC \\uD6C5\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const {\\n  data: {\\n    pages, // \\uC2E4\\uC81C \\uD398\\uC774\\uC9C0 \\uB370\\uC774\\uD130 \\uBC30\\uC5F4 [0, 1, 2, 3] \\uAC01\\uAC01\\uC758 \\uBC30\\uC5F4 \\uC778\\uB371\\uC2A4\\uC5D0 \\uB9DE\\uCDB0\\uC11C \\uB370\\uC774\\uD130\\uAC00 \\uB4E4\\uC5B4\\uAC00 \\uC788\\uC74C\\n    pageParams // \\uB2E4\\uC74C \\uD398\\uC774\\uC9C0 url \\uBC0F param \\uC815\\uBCF4 -> getNextPageParam \\uC758 \\uB9AC\\uD134 \\uAC12\\n  }, \\n  fetchNextPage, // \\uB2E4\\uC74C \\uD398\\uC774\\uC9C0 fetching \\uD558\\uB294 \\uD568\\uC218\\n  hasNextPage, // \\uB2E4\\uC74C \\uD398\\uC774\\uC9C0\\uAC00 \\uC788\\uB294 \\uACBD\\uC6B0 \\uCC38\\n  isLoading, // \\uB85C\\uB529 \\uC2DC \\uCC38\\n  isFetching, // \\uB370\\uC774\\uD130 fetching \\uC2DC \\uCC38\\n  isError // \\uC5D0\\uB7EC \\uBC1C\\uC0DD\\uC2DC \\uCC38\\n} = useInfiniteQuery(\\n  [\\\"sw-people\\\"], ({pageParam = initialUrl}) => {\\n    console.log(pageParam);\\n    return fetchUrl(pageParam)\\n  },\\n  {\\n    getNextPageParam: lastPage => lastPage.next || undefined\\n  }\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"useisfetching\"\n  }, \"useIsFetching\"), mdx(\"p\", null, \"react query \\uCEE4\\uC2A4\\uD140 \\uD6C5\\uC73C\\uB85C \\uD604\\uC7AC queryClient \\uB4E4\\uC758 isFetching \\uC0C1\\uD0DC\\uB97C \\uAC00\\uC838\\uC62C \\uC218\\uC788\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"default-error-handling\"\n  }, \"Default Error Handling\"), mdx(\"p\", null, \"\\uD574\\uB2F9 \\uD504\\uB85C\\uC81D\\uD2B8\\uC758 \\uD2B9\\uC131\\uC5D0 \\uB9DE\\uAC8C \\uC804\\uC5ED\\uC5D0\\uC11C \\uC5D0\\uB7EC\\uB97C \\uD578\\uB4E4\\uB9C1\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"new QueryClient({\\n  defaultOptions: {\\n    queries: {\\n      retry: 0,\\n      onError: (error: unknown) => {\\n        // error handling \\n      },\\n    },\\n  },\\n});\\n\")), mdx(\"p\", null, \"\\uC774\\uB807\\uAC8C \\uB4F1\\uB85D\\uD558\\uACE0 \\uCEE4\\uC2A4\\uD140 \\uD574\\uC57C\\uD558\\uB294 \\uACF3\\uC5D0\\uC11C\\uB9CC \\uBCC4\\uB3C4\\uC758 onError \\uB97C \\uC124\\uC815\"), mdx(\"h2\", {\n    \"id\": \"데이터를-미리-채우는-메서드-및-옵션들\"\n  }, \"\\uB370\\uC774\\uD130\\uB97C \\uBBF8\\uB9AC \\uCC44\\uC6B0\\uB294 \\uBA54\\uC11C\\uB4DC \\uBC0F \\uC635\\uC158\\uB4E4\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\uC5B4\\uB5BB\\uAC8C \\uC0AC\\uC6A9\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\uC5B4\\uB514\\uC11C \\uC624\\uB294 \\uB370\\uC774\\uD130?\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\uCE90\\uC2DC\\uAC00 \\uB418\\uB294\\uC9C0\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"prefetchQuery\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"queryClient \\uC758 \\uBA54\\uC11C\\uB4DC\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"server\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"setQueryData\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"queryClient \\uC758 \\uBA54\\uC11C\\uB4DC\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"client\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"placeholderData\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"useQuery \\uC758 \\uC635\\uC158\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"client\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"initialData\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"useQuery \\uC758 \\uC635\\uC158\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"client\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"true\")))), mdx(\"h2\", {\n    \"id\": \"prefetchquery-를-이용해-미리-데이터-가져오기\"\n  }, \"PrefetchQuery \\uB97C \\uC774\\uC6A9\\uD574 \\uBBF8\\uB9AC \\uB370\\uC774\\uD130 \\uAC00\\uC838\\uC624\\uAE30\"), mdx(\"p\", null, \"\\uB9CC\\uC57D 80\\uD37C\\uC13C\\uD2B8\\uC758 \\uC720\\uC800\\uAC00 \\uD648\\uD398\\uC774\\uC9C0 \\uBC29\\uBB38\\uD6C4 \\uAC15\\uC758 \\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\\uB85C \\uAC04\\uB2E4\\uBA74, \"), mdx(\"p\", null, \"\\uD648\\uD398\\uC774\\uC9C0 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uC5D0\\uC11C \\uAC15\\uC758 \\uB9AC\\uC2A4\\uD2B8\\uB97C prefetch \\uD574 \\uB193\\uB294\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"select-를-통해-가져온-데이터-커스텀하기\"\n  }, \"select \\uB97C \\uD1B5\\uD574 \\uAC00\\uC838\\uC628 \\uB370\\uC774\\uD130 \\uCEE4\\uC2A4\\uD140\\uD558\\uAE30\"), mdx(\"p\", null, \"useQuery \\uC758 select \\uC635\\uC158\\uC744 \\uD1B5\\uD574 \\uAC00\\uC838\\uC628 \\uB370\\uC774\\uD130\\uB97C \\uCEE4\\uC2A4\\uD140\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{ select: showAll ? undefined : selectFn }\\n\")), mdx(\"p\", null, \"undefined \\uC2DC\\uC5D0\\uB294 \\uD604\\uC7AC \\uCE90\\uC2DC \\uB370\\uC774\\uD130\\uB97C \\uADF8\\uB798\\uB3C4 \\uBC18\\uD658\\uD558\\uACE0, \\uD568\\uC218\\uAC00 \\uB4F1\\uB85D\\uB41C \\uACBD\\uC6B0\\uC5D0\\uB294 \\uD574\\uB2F9 \\uD568\\uC218\\uC758 \\uB9AC\\uD134\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"re-fetching-을-하는-이유와-시점\"\n  }, \"Re-fetching \\uC744 \\uD558\\uB294 \\uC774\\uC720\\uC640 \\uC2DC\\uC810\"), mdx(\"p\", null, \"\\uC0C8\\uB85C\\uC6B4 \\uB370\\uC774\\uD130\\uB97C \\uC11C\\uBC84\\uB85C \\uBD80\\uD130 \\uBC1B\\uC544\\uC624\\uAE30 \\uC704\\uD574\\uC11C \\uD2B9\\uC815 \\uC2DC\\uC810\\uC5D0 refetching \\uC744 \\uD55C\\uB2E4.\"), mdx(\"p\", null, \"\\uC2DC\\uC810\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C8\\uB85C\\uC6B4 \\uCFFC\\uB9AC \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 \\uB9C8\\uC6B4\\uD2B8 \\uB420\\uB54C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9AC\\uC561\\uD2B8 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 mount \\uB420\\uB54C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCC3D\\uC774 \\uD3EC\\uCEE4\\uC2F1 \\uB420\\uB54C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB124\\uD2B8\\uC6CC\\uD06C\\uAC00 \\uB2E4\\uC2DC \\uC5F0\\uACB0 \\uB420\\uB54C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"refetchInterval \\uC774 expired \\uB420\\uB54C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"polling\")))), mdx(\"h2\", {\n    \"id\": \"re-fetching-을-피하는-방법\"\n  }, \"Re-fetching \\uC744 \\uD53C\\uD558\\uB294 \\uBC29\\uBC95\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"staleTime \\uB298\\uB9AC\\uAE30\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"refetch \\uC740 \\uB370\\uC774\\uD130\\uAC00 stale \\uC0C1\\uD0DC\\uC778 \\uACBD\\uC6B0\\uC5D0\\uB9CC \\uC694\\uCCAD\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 fresh \\uC0C1\\uD0DC\\uC758 \\uB370\\uC774\\uD130\\uB97C \\uC624\\uB798 \\uB194\\uB454\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"refresch option \\uB4E4 \\uB044\\uAE30\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5EC\\uB7EC\\uAC00\\uC9C0 refresh \\uC635\\uC158\\uB4E4\\uC774 \\uC874\\uC7AC\\uD558\\uB294\\uB370 \\uC774\\uB4E4\\uC744 \\uB044\\uBA74 \\uB41C\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC815\\uB9D0 \\uD55C\\uBC88 \\uAC00\\uC838\\uC624\\uBA74 \\uC815\\uB9D0 \\uC548\\uAC00\\uC838\\uC640\\uB3C4 \\uB418\\uB294 \\uB370\\uC774\\uD130\\uB4E4\\uC740 \\uC870\\uAE08 \\uAD00\\uB9AC\\uD574\\uC918\\uB3C4 \\uAD1C\\uCC2E\\uC744 \\uAC83 \\uAC19\\uC74C\")), mdx(\"h2\", {\n    \"id\": \"전역-refetch-option\"\n  }, \"\\uC804\\uC5ED refetch option\"), mdx(\"p\", null, \"queryClient\\uC5D0 \\uC124\\uC815\\uAC00\\uB2A5\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"new QueryClient({\\n  defaultOptions: {\\n    queries: {\\n      retry: 0,\\n      onError: (error: unknown) => {\\n        queryErrorHandler(error);\\n      },\\n      refetchOnMount: false,\\n      refetchOnWindowFocus: false,\\n      refetchOnReconnect: false,\\n    },\\n  },\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"queryclientsetquerydata\"\n  }, \"queryClient.setQueryData\"), mdx(\"p\", null, \"\\uCFFC\\uB9AC \\uD0A4 \\uAE30\\uBC18\\uC73C\\uB85C \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8 \\uCE90\\uC2DC \\uB370\\uC774\\uD130\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8 \\uC2DC\\uD0A8\\uB2E4. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"queryClient.setQueryData(queryKey, updater)\\n\")), mdx(\"h2\", {\n    \"id\": \"queryclientgetquerydata\"\n  }, \"queryClient.getQueryData\"), mdx(\"p\", null, \"\\uCFFC\\uB9AC \\uD0A4 \\uAE30\\uBC18\\uC73C\\uB85C \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8 \\uCE90\\uC2DC \\uB370\\uC774\\uD130\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4. \\uC81C\\uB124\\uB9AD\\uC73C\\uB85C \\uB9AC\\uD134\\uD558\\uB294 \\uAC12\\uC758 \\uD0C0\\uC785\\uC744 \\uC9C0\\uC815\\uD560 \\uC218\\uB3C4 \\uC788\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"getquerydata-vs-usequery\"\n  }, \"getQueryData VS useQuery\"), mdx(\"p\", null, \"\\uD574\\uB2F9 Discussions \\uB9C1\\uD06C\\uB97C \\uCCA8\\uBD80\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tannerlinsley/react-query/discussions/1619\"\n  }, \"What is the best (or alternate) ways to fetch the server data from a child component when the parent component hits an api that returns all the data that we need?\")), mdx(\"p\", null, \"\\uB370\\uC774\\uD130\\uAC00 \\uD544\\uC694\\uD55C \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uC5D0\\uC11C \\uC9C1\\uC811 useQuery \\uB97C \\uC694\\uCCAD\\uD558\\uB294 \\uAC83\\uC744 \\uAD8C\\uC7A5\\uD55C\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"query-의-onsuccess-가-울리는-시점\"\n  }, \"query \\uC758 onSuccess \\uAC00 \\uC6B8\\uB9AC\\uB294 \\uC2DC\\uC810\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"queryClient \\uC758 setQueryData\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"query \\uC778\\uC2A4\\uD134\\uC2A4 \\uC0DD\\uC131\")), mdx(\"p\", null, \"\\uC774\\uB85C\\uC778\\uD574 \\uC54C\\uAC8C\\uB41C \\uC0AC\\uC2E4\\uC740 \\uBAA8\\uB4E0 API fetching \\uC744 useQuery \\uB85C\\uB9CC \\uD574\\uACB0\\uD558\\uB294 \\uAC83\\uC774 \\uC544\\uB2C8\\uB77C, api\\uC758 \\uC131\\uACF5 \\uC751\\uB2F5\\uC5D0 setQueryData \\uB97C \\uD574\\uB3C4 \\uAD1C\\uCC2E\\uB2E4.\"), mdx(\"p\", null, \"\\uC544\\uB798 \\uC608\\uC81C \\uAC19\\uC740 \\uACBD\\uC6B0\\uC5D0\\uB3C4 login, logout \\uD558\\uB294 API \\uB294 \\uBCC4\\uB3C4\\uB85C \\uC874\\uC7AC\\uD558\\uACE0, \\uD574\\uB2F9 API \\uC758 \\uC131\\uACF5 \\uCF5C\\uBC31\\uC5D0\\uC11C setQueryData \\uB97C \\uC9C4\\uD589\\uD558\\uC600\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"export function useUser(): UseUser {\\n  // TODO: call useQuery to update user data from server\\n  const queryClient = useQueryClient();\\n  const { data: user } = useQuery(queryKeys.user, () => getUser(user), {\\n    onSuccess: (received: User | null) => {\\n      console.log({ received });\\n      if (!received) {\\n        clearStoredUser();\\n      } else {\\n        setStoredUser(received);\\n      }\\n    },\\n  });\\n\\n  // meant to be called from useAuth\\n  function updateUser(newUser: User): void {\\n    queryClient.setQueryData(queryKeys.user, 'hello');\\n  }\\n\\n  // meant to be called from useAuth\\n  function clearUser() {\\n    queryClient.setQueryData(queryKeys.user, null);\\n  }\\n\\n  return { user, updateUser, clearUser };\\n}\\n\")), mdx(\"p\", null, \"updateUser \\uB97C \\uC2E4\\uD589\\uC2DC\\uCF30\\uC744 \\uB54C useQuery \\uC758 onSuccess \\uCF5C\\uBC31\\uC774 \\uC2E4\\uD589\\uB41C\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"query-의-initialdata-를-이용해서-쿼리-인스턴스의-초기-데이터를-셋팅한다\"\n  }, \"query \\uC758 initialData \\uB97C \\uC774\\uC6A9\\uD574\\uC11C \\uCFFC\\uB9AC \\uC778\\uC2A4\\uD134\\uC2A4\\uC758 \\uCD08\\uAE30 \\uB370\\uC774\\uD130\\uB97C \\uC14B\\uD305\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"initialData \\uB294 \\uC77C\\uBC18 \\uAC12 \\uAC1D\\uCCB4\\uAC00 \\uB420 \\uC218\\uB3C4 \\uC788\\uACE0, \\uD568\\uC218 \\uD615\\uD0DC\\uB85C \\uB9AC\\uD134 \\uAC12\\uC744 \\uB123\\uC744 \\uC218\\uB3C4 \\uC788\\uB2E4.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-query.tanstack.com/guides/initial-query-data#using-initialdata-to-prepopulate-a-query\"\n  }, \"Initial Query Data\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"function Todo({ todoId }) {\\n   const result = useQuery(['todo', todoId], () => fetch('/todos'), {\\n     initialData: () => {\\n       // Use a todo from the 'todos' query as the initial data for this todo query\\n       return queryClient.getQueryData('todos')?.find(d => d.id === todoId)\\n     },\\n   })\\n }\\n\")), mdx(\"p\", null, \"initialData \\uC5D0\\uC11C \\uAE30\\uC874 queryClient \\uC758 \\uAC12\\uC744 \\uAC00\\uC838\\uC640\\uC11C \\uBCF4\\uC5EC\\uC8FC\\uB294 \\uAC83\\uB3C4 \\uAC00\\uB2A5\\uD558\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"query-의-enabled-옵션을-이용해서-의존성-쿼리-인스턴스를-만든다\"\n  }, \"query \\uC758 enabled \\uC635\\uC158\\uC744 \\uC774\\uC6A9\\uD574\\uC11C \\uC758\\uC874\\uC131 \\uCFFC\\uB9AC \\uC778\\uC2A4\\uD134\\uC2A4\\uB97C \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-query.tanstack.com/guides/dependent-queries\"\n  }, \"https://react-query.tanstack.com/guides/dependent-queries\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const{data: userAppointments = fallback}= useQuery(\\n    'user-appointments',\\n    ()=> getUserAppointments(user),\\n    {\\n        enabled: !!user,\\n    },\\n);\\n\")), mdx(\"h2\", {\n    \"id\": \"queryclient-의-removequeries-는-쿼리-인스턴스를-제거한다\"\n  }, \"queryClient \\uC758 removeQueries \\uB294 \\uCFFC\\uB9AC \\uC778\\uC2A4\\uD134\\uC2A4\\uB97C \\uC81C\\uAC70\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"devtool \\uB85C \\uD655\\uC778\\uD55C \\uACB0\\uACFC \\uCFFC\\uB9AC \\uD074\\uB77C\\uC774\\uC5B8\\uD2B8 \\uC790\\uCCB4\\uB97C \\uC81C\\uAC70\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"setQueryData null \\uACFC removeQueries \\uC640 \\uB3D9\\uC791\\uC774 \\uBE44\\uC2B7\\uD558\\uC9C0\\uB9CC, setQueryData \\uB294 \\uCFFC\\uB9AC\\uC758 onSuccess \\uD568\\uC218\\uB97C \\uD638\\uCD9C\\uD55C\\uB2E4\\uB294 \\uAC83\\uC5D0 \\uC758\\uBBF8\\uAC00 \\uC788\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"mutation-전역-에러-헨들링\"\n  }, \"mutation \\uC804\\uC5ED \\uC5D0\\uB7EC \\uD5E8\\uB4E4\\uB9C1\"), mdx(\"p\", null, \"query \\uC640 \\uBE44\\uC2B7\\uD558\\uAC8C QueryClient \\uC778\\uC2A4\\uD134\\uC2A4\\uB97C \\uC0DD\\uC131\\uD558\\uB294 \\uACFC\\uC815\\uC5D0\\uC11C \\uC804\\uC5ED \\uC5D0\\uB7EC \\uD578\\uB4E4\\uB9C1\\uC744 \\uCD94\\uAC00\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"export const queryClient = new QueryClient({\\n  defaultOptions: {\\n    ...,\\n    mutations: {\\n      onError: queryErrorHandler\\n    }\\n  }\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"전역-mutation-loading-은-useismutating-을-사용한다\"\n  }, \"\\uC804\\uC5ED mutation loading \\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"useIsMutating\"), \" \\uC744 \\uC0AC\\uC6A9\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"export function Loading(): ReactElement {\\n    const isFetching = useIsFetching();\\n  const isMutating = useIsMutating();\\n\\n  const display = isFetching || isMutating ? 'inherit' : 'none';\\n  \\n  return <Loading {display} />\\n}\\n\\n\")), mdx(\"h2\", {\n    \"id\": \"usemutation-과-usequery-의-차이점\"\n  }, \"useMutation \\uACFC useQuery \\uC758 \\uCC28\\uC774\\uC810\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCE90\\uC2DC \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC74C (no cache data)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC7AC\\uC2DC\\uB3C4\\uAC00 \\uC5C6\\uC74C (no retries)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC7AC\\uD328\\uCE58\\uAC00 \\uC5C6\\uC74C (no refetch)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"isFetching \\uC774 \\uC5C6\\uC74C (\\uCE90\\uC2DC \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uAE30 \\uB54C\\uBB38\\uC5D0, \\uBAA8\\uB4E0 \\uB85C\\uB529\\uC740 isLoading \\uC73C\\uB85C \\uD310\\uBCC4)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mutate \\uD568\\uC218\\uB97C \\uB9AC\\uD134\\uD558\\uACE0 mutate \\uD568\\uC218\\uAC00 \\uC2E4\\uD589\\uB420 \\uB54C \\uB3D9\\uC791\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"onMutate callback \\uC874\\uC7AC\")), mdx(\"h2\", {\n    \"id\": \"usemutatefunction의-제네릭\"\n  }, \"UseMutateFunction\\uC758 \\uC81C\\uB124\\uB9AD\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"UseMutateFunction<TData, TError, TVariables, TContext>\\n\\nTData: mutate \\uC758 \\uB9AC\\uD134 \\uD0C0\\uC785\\nTError: mutate \\uC758 \\uC5D0\\uB7EC \\uD0C0\\uC785\\nTVariables: mutate \\uD568\\uC218\\uC758 \\uC778\\uC790 \\uD0C0\\uC785\\nTContext: onMutate \\uCF5C\\uBC31\\uC758 \\uC778\\uC790 \\uD0C0\\uC785\\n\")), mdx(\"h2\", {\n    \"id\": \"usemutatefunction-사용-예시\"\n  }, \"UseMutateFunction \\uC0AC\\uC6A9 \\uC608\\uC2DC\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"function useReserveAppointment(): UseMutateFunction<void, Error, Appointment, unknown> {\\n  const { mutate } = useMutation((appointment: Appointment) => setAppointmentUser())\\n\\n  return mutate;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"queryclientinvalidatequeries\"\n  }, \"queryClient.invalidateQueries\"), mdx(\"p\", null, \"\\uCFFC\\uB9AC\\uB97C \\uBB34\\uD6A8\\uD654 \\uC2DC\\uCF1C \\uC0C8\\uB85C\\uC6B4 \\uCFFC\\uB9AC \\uB370\\uC774\\uD130\\uB97C fetching \\uD55C\\uB2E4.\"), mdx(\"p\", null, \"invalidateQueries \\uC758 \\uD6A8\\uACFC  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"query \\uB97C stale \\uC0C1\\uD0DC\\uB85C \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9CC\\uC57D \\uD604\\uC7AC \\uB80C\\uB354\\uB9C1 \\uC911\\uC774\\uB77C\\uBA74 re-fetch \\uD55C\\uB2E4.\")), mdx(\"h2\", {\n    \"id\": \"query-key-prefixes\"\n  }, \"Query Key Prefixes\"), mdx(\"p\", null, \"useQuery \\uC758 \\uCFFC\\uB9AC\\uD0A4\\uC758 \\uAE30\\uC900 \\uC798 \\uC124\\uC815\\uD574\\uC11C, invalidateQueries \\uB97C \\uD560\\uB584 \\uADF8\\uB8F9\\uD551\\uD558\\uB294 \\uBC29\\uBC95\\uC774 \\uC788\\uB2E4.\"), mdx(\"p\", null, \"\\uC608\\uB97C \\uB4E4\\uC5B4, \\uD574\\uB2F9 mutate \\uC131\\uACF5 \\uC2DC user \\uAD00\\uB828 \\uCFFC\\uB9AC\\uB4E4\\uC744 \\uC77C\\uAD04 invalidateQueries \\uB97C \\uD574\\uC57C\\uB41C\\uB2E4\\uACE0 \\uD560\\uB54C \\uC720\\uC6A9\\uD558\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"onsuccess-로직에서-return-을-하면-await-처럼-동작한다\"\n  }, \"onSuccess \\uB85C\\uC9C1\\uC5D0\\uC11C return \\uC744 \\uD558\\uBA74 await \\uCC98\\uB7FC \\uB3D9\\uC791\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"onSuccess \\uB85C\\uC9C1\\uC5D0\\uC11C return \\uC744 \\uC0AC\\uC6A9\\uD558\\uAC8C \\uB418\\uBA74 await \\uB97C \\uAC74\\uAC83\\uCC98\\uB7FC \\uB3D9\\uC791\\uD558\\uAC8C \\uB41C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{\\n  {\\n    onSuccess: () => {\\n      return queryClient.refetchQueries('todos'); // \\uD574\\uB2F9 refetch \\uAC00 \\uC131\\uACF5\\uD588\\uC744 \\uB54C \\uC774\\uD6C4 \\uB85C\\uC9C1\\uC774 \\uC218\\uD589\\uB41C\\uB2E4.\\n    }\\n  }\\n\\n  {\\n    onSuccess: () => {\\n      queryClient.refetchQueries('todos'); // void \\uCC98\\uB7FC \\uB3D9\\uC791\\uD568\\n    }\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"infinitequery-에서는-invalidatequeries-가-동작하지-않는-것-같다\"\n  }, \"infiniteQuery \\uC5D0\\uC11C\\uB294 invalidateQueries \\uAC00 \\uB3D9\\uC791\\uD558\\uC9C0 \\uC54A\\uB294 \\uAC83 \\uAC19\\uB2E4.\"), mdx(\"p\", null, \"mutate \\uC774\\uD6C4\\uC5D0 onSuccess \\uB85C\\uC9C1\\uC5D0\\uC11C infiniteQuery \\uB97C invalidate \\uD574\\uC57C\\uD558\\uB294 \\uC77C\\uC774 \\uC788\\uC5C8\\uB2E4.\\n(\\uC0C1\\uC138\\uD398\\uC774\\uC9C0\\uC5D0\\uC11C \\uC88B\\uC544\\uC694\\uB97C \\uB204\\uB974\\uACE0, \\uB2E4\\uC2DC \\uB9AC\\uC2A4\\uD2B8 \\uD398\\uC774\\uC9C0\\uB85C \\uC774\\uB3D9\\uD55C \\uACBD\\uC6B0)\"), mdx(\"p\", null, \"\\uD558\\uC9C0\\uB9CC infiniteQuery \\uAC00 invalidate \\uC0C1\\uD0DC\\uB85C \\uBCC0\\uD558\\uC9C0 \\uC54A\\uC558\\uB2E4.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tannerlinsley/react-query/discussions/1264\"\n  }, \"https://github.com/tannerlinsley/react-query/discussions/1264\")), mdx(\"p\", null, \"\\uC4F0\\uB808\\uB4DC\\uB85C \\uD655\\uC778\\uD588\\uC744 \\uB54C \\uC81C\\uC791\\uC790\\uBD84\\uC740 \\uB418\\uB294\\uAC8C \\uC815\\uC0C1\\uC774\\uB77C\\uACE0 \\uD558\\uC2DC\\uB294\\uB370, \\uB098\\uB294 \\uC798 \\uB418\\uC9C0 \\uC54A\\uC558\\uB2E4.\"), mdx(\"p\", null, \"\\uADF8\\uB798\\uC11C \\uC784\\uC2DC\\uBC29\\uD3B8\\uC73C\\uB85C refetchQueries \\uB97C \\uC0AC\\uC6A9\\uD588\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"mutate-와-usemutation-에-onsuccess-로직\"\n  }, \"mutate \\uC640 useMutation \\uC5D0 onSuccess \\uB85C\\uC9C1\"), mdx(\"p\", null, \"mutation \\uC774 \\uC131\\uACF5\\uD588\\uC744\\uB54C\\uC758 \\uB85C\\uC9C1\\uC744 \\uB2F4\\uC744 \\uC218 \\uC788\\uB294 \\uD568\\uC218\\uC778 onSuccess \\uB294 useMutation \\uC758 \\uC138 \\uBC88\\uCA30 \\uC778\\uC790 or onSuccess \\uC758 \\uB450 \\uBC88\\uC9F8 \\uC778\\uC790\\uB85C \\uB118\\uAE38 \\uC218 \\uC788\\uB2E4. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \" const {\\n   mutate,\\n } = useMutation(mutationFn, {\\n   onSuccess,\\n })\\n \\n mutate(variables, {\\n   onSuccess: () => {\\n\\n   },\\n })\\n\")), mdx(\"h2\", {\n    \"id\": \"usemutation-의-동작\"\n  }, \"useMutation \\uC758 \\uB3D9\\uC791\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"onMutate\"), \"\\nmutation \\uC774 \\uC2DC\\uC791\\uD558\\uC600\\uC744 \\uB54C\\nmutation \\uC5D0\\uC11C return \\uD558\\uB294 \\uAC12\\uC740 \\uD574\\uB2F9 mutation \\uC5D0\\uC11C context \\uB85C \\uCC38\\uC870\\uAC00 \\uAC00\\uB2A5\\uD558\\uB2E4.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"onError\"), \"\\n\\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC744 \\uB54C\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"onSuccess\"), \"\\n\\uC131\\uACF5\\uD588\\uC744 \\uB54C\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"onSettled\"), \"\\nmutation \\uC774 \\uB05D\\uB0AC\\uC744 \\uB54C, \\uC131\\uACF5 or \\uC2E4\\uD328 \\uC5D0 \\uC0C1\\uAD00\\uC5C6\\uC774 \\uC2E4\\uD589\\uB428\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"useMutation(addTodo, {\\n  onMutate: variables => {\\n    return { id: 1 };\\n  },\\n  onError: (error, variables, context) => {\\n    console.log(`\\uC5D0\\uB7EC \\uBC1C\\uC0DD: ${context.id}`);\\n  },\\n  onSuccess: (data, variables, context) => {\\n    console.log('\\uC131\\uACF5');\\n  },\\n  onSettled: (data, error, variables, context) => {\\n    console.log('mutation \\uB05D\\uB0A8');\\n  },\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"onsuccess-의-인자\"\n  }, \"onSuccess \\uC758 \\uC778\\uC790\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"data\"), \"\\nAPI \\uC751\\uB2F5 \\uAC12\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"variables\"), \"\\nmutate \\uD568\\uC218 \\uC2E4\\uD589 \\uC778\\uC790\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"context\"), \"\\nonMutate \\uD568\\uC218\\uC5D0\\uC11C return \\uD55C \\uAC12\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"onSuccess: (data, variables, context) => {\\n  console.log('\\uC131\\uACF5');\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"usequery-사용시-isloading-과-data-유무를-전부-확인해야한다\"\n  }, \"useQuery \\uC0AC\\uC6A9\\uC2DC isLoading \\uACFC data \\uC720\\uBB34\\uB97C \\uC804\\uBD80 \\uD655\\uC778\\uD574\\uC57C\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"\\uAC04\\uD639 useQuery \\uB97C \\uC0AC\\uC6A9\\uD560 \\uB54C \\uB2E8\\uC21C\\uD788 isLoading \\uC73C\\uB85C\\uB9CC \\uB370\\uC774\\uD130 \\uC720\\uBB34\\uB97C \\uD310\\uB2E8\\uD560 \\uB54C\\uAC00 \\uC788\\uC5C8\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"\\n\\nconst { data, isLoading } = useQuery();\\n\\nif (isLoading) { // fetching \\uB05D\\uB09C\\uD6C4\\n  return <div>Loading \\uC911...</div>\\n}\\n\\nreturn (\\n  <div>{data?.hello}</div>\\n)\\n\")), mdx(\"p\", null, \"\\uC774\\uB807\\uAC8C \\uB418\\uB294 \\uACBD\\uC6B0 API \\uAC00 \\uC2E4\\uD328\\uD55C \\uACBD\\uC6B0 \\uD574\\uB2F9 \\uCEF4\\uD3EC\\uB10C\\uD2B8 \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD55C\\uB2E4.\\n\\uB370\\uC774\\uD130\\uB97C fetching \\uD558\\uB294 \\uB3D9\\uC548 isLoading \\uC774 true \\uAC00 \\uB41C\\uB2E4.\"), mdx(\"p\", null, \"\\uC774\\uD6C4 API \\uAC00 \\uC2E4\\uD328\\uD574\\uC11C \\uB370\\uC774\\uD130\\uAC00 \\uC815\\uC0C1\\uC801\\uC73C\\uB85C \\uBD88\\uB7EC\\uC640\\uC9C0\\uC9C0 \\uC54A\\uC740 \\uC0C1\\uD0DC\\uC5D0\\uC11C isLoading \\uC740 false \\uAC00 \\uB418\\uACE0, data\\uB294 undefined \\uAC00 \\uB41C\\uB2E4.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data.hello\"), \" \\uC5D0\\uC11C \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"\\uB530\\uB77C\\uC11C isError \\uD639\\uC740 data \\uC758 \\uC720\\uBB34\\uC640 \\uAC19\\uC740 \\uC801\\uB2F9\\uD55C \\uBD84\\uAE30\\uAC00 \\uD544\\uC694\\uD558\\uB2E4.\"), mdx(\"h2\", {\n    \"id\": \"optimistic-updates\"\n  }, \"Optimistic Updates\"), mdx(\"p\", null, \"\\uC9C1\\uC5ED\\uD558\\uBA74 \\uB099\\uAD00\\uC801 \\uC5C5\\uB370\\uC774\\uD2B8\\uB85C, \\uC0AC\\uC6A9\\uC790\\uC758 \\uC694\\uCCAD\\uC774 \\uC624\\uBA74 \\uC989\\uC2DC \\uD574\\uB2F9 UI \\uB97C \\uC5C5\\uB370\\uC774\\uD2B8 \\uC2DC\\uD0A4\\uACE0, \\uC774\\uD6C4 \\uC11C\\uBC84\\uC758 \\uC751\\uB2F5\\uC73C\\uB85C \\uC5C5\\uB370\\uC774\\uD2B8 \\uD639\\uC740 UI \\uB864\\uBC31\\uC744 \\uC2DC\\uD0A4\\uB294 \\uBC29\\uBC95\\uC774\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC88B\\uC544\\uC694\\uB97C \\uB20C\\uB800\\uC744 \\uB54C \\uC0AC\\uC6A9\\uD558\\uAE30 \\uC88B\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"useMutation(updateTodo, {\\n  // mutate \\uC2E4\\uD589\\n  onMutate: async newTodo => {\\n    // cancelQueries \\uB97C \\uD1B5\\uD574 \\uD639\\uC2DC \\uC2E4\\uD589\\uB418\\uACE0 \\uC788\\uB294 refetch \\uB97C \\uCDE8\\uC18C\\uD55C\\uB2E4.\\n    await queryClient.cancelQueries(['todos', newTodo.id])\\n\\n    // \\uAE30\\uC874 \\uB370\\uC774\\uD130 \\uAC00\\uC838\\uC624\\uAE30\\n    const previousTodo = queryClient.getQueryData(['todos', newTodo.id])\\n\\n    // \\uB099\\uAD00\\uC801 \\uC5C5\\uB370\\uC774\\uD2B8\\n    queryClient.setQueryData(['todos', newTodo.id], newTodo)\\n\\n    // \\uD574\\uB2F9 mutation \\uC5D0\\uC11C \\uC0AC\\uC6A9\\uD560 context \\uB9AC\\uD134\\n    return { previousTodo, newTodo }\\n  },\\n  // \\uC5D0\\uB7EC \\uBC1C\\uC0DD \\uC2DC \\uAE30\\uC874\\uC5D0 \\uC5C5\\uB370\\uC774\\uD2B8 \\uD588\\uB358 \\uB370\\uC774\\uD130 \\uB418\\uB3CC\\uB9AC\\uAE30\\n  // \\uC774\\uB54C onMutate \\uC5D0\\uC11C \\uB9AC\\uD134\\uD55C \\uAC12\\uC744 \\uC138\\uBC88\\uC9F8 \\uC778\\uC790\\uC778 context \\uC5D0\\uC11C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uC74C\\n  onError: (err, newTodo, context) => {\\n    queryClient.setQueryData(\\n      ['todos', context.newTodo.id],\\n      context.previousTodo\\n    )\\n  },\\n  // \\uC131\\uACF5 or \\uC2E4\\uD328 \\uC774\\uD6C4\\uC5D0 \\uCFFC\\uB9AC \\uB9AC\\uD328\\uCE58\\n  onSettled: newTodo => {\\n    queryClient.invalidateQueries(['todos', newTodo.id])\\n  },\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"setlogger\"\n  }, \"setLogger\"), mdx(\"p\", null, \"react query \\uC5D0\\uC11C \\uBC1C\\uC0DD\\uD558\\uB294 \\uB85C\\uADF8\\uB97C setLogger \\uD568\\uC218\\uB97C \\uD1B5\\uD574 \\uCEE4\\uC2A4\\uD140\\uD560 \\uC218 \\uC788\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC0AC\\uB0B4\\uC5D0\\uC11C\\uB294 \\uC708\\uC2A4\\uD134\\uC744 \\uC0AC\\uC6A9\\uD558\\uB2C8 \\uC804\\uC5ED\\uC801\\uC73C\\uB85C \\uC124\\uC815\\uD558\\uBA74 \\uB3C4\\uC6C0\\uC774 \\uB420 \\uAC83 \\uAC19\\uB2E4. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { setLogger } from 'react-query'\\nimport { printLog, printWarn, printError } from 'custom-logger'\\n\\n// Custom logger\\nsetLogger({\\n  log: printLog,\\n  warn: printWarn,\\n  error: printError,\\n})\\n\\n// Winston logger\\nsetLogger(winston.createLogger())\\n\")), mdx(\"h2\", {\n    \"id\": \"query-test-는-msw와-react-testing-library-를-사용한다\"\n  }, \"Query Test \\uB294 msw\\uC640 react-testing-library \\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4.\"), mdx(\"p\", null, \"jest \\uD658\\uACBD\\uC5D0\\uC11C msw \\uB97C \\uC14B\\uD305\\uD558\\uC5EC \\uD14C\\uC2A4\\uD2B8\\uD558\\uBA74 \\uC2E4\\uC81C API \\uD1B5\\uC2E0\\uC744 \\uBAA9\\uD0B9\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"p\", null, \"msw \\uB294 \\uD29C\\uD1A0\\uB9AC\\uC5BC\\uC774 \\uC798\\uB418\\uC5B4 \\uC788\\uC5B4 \\uC124\\uCE58 \\uBC0F \\uC791\\uC131 \\uBC29\\uBC95\\uC740 \\uC544\\uB798 \\uACF5\\uC2DD\\uBB38\\uC11C\\uB97C \\uCC38\\uACE0\\uD55C\\uB2E4.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://mswjs.io/\"\n  }, \"https://mswjs.io/\")), mdx(\"p\", null, \"msw \\uC5D0\\uC11C \\uC9C0\\uC815\\uD55C \\uD5E8\\uB4E4\\uB7EC\\uB97C \\uD1B5\\uD574 \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uC5D0\\uC11C \\uB124\\uD2B8\\uC6CC\\uD06C \\uD1B5\\uC2E0\\uC744 \\uBAA9\\uD0B9\\uD55C\\uB2E4.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"req\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC694\\uCCAD, \\uC694\\uCCAD\\uC5D0 \\uAD00\\uB828\\uB41C \\uC815\\uBCF4\\uAC00 \\uB2F4\\uACA8\\uC788\\uB294 object\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"res\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC751\\uB2F5, mocked response \\uC0DD\\uC131\\uC744 \\uB3C4\\uC640\\uC8FC\\uB294 \\uD568\\uC218\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ctx\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"status code \\uB098 headers, body, \\uB4F1\\uB4F1\\uC744 \\uC14B\\uD305\\uD560 \\uC218 \\uC788\\uB294 \\uC778\\uC2A4\\uD134\\uC2A4\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const worker = setupWorker(\\n  rest.post('/login', (req, res, ctx) => {  ctx   \\n    const { username } = req.body\\n    return res(\\n      ctx.json({\\n        username,\\n        firstName: 'John'\\n      })\\n    )\\n  }),\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"mutate-는-onsuccess-는-해당-컴포넌트가-마운트가-해제되면-울리지-않는다\"\n  }, \"mutate \\uB294 onSuccess \\uB294 \\uD574\\uB2F9 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uB9C8\\uC6B4\\uD2B8\\uAC00 \\uD574\\uC81C\\uB418\\uBA74 \\uC6B8\\uB9AC\\uC9C0 \\uC54A\\uB294\\uB2E4.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/questions/70662482/react-query-mutate-onsuccess-function-not-responding\"\n  }, \"\\uAD00\\uB828 \\uB9C1\\uD06C\")), mdx(\"p\", null, \"\\uAC15\\uC758\\uC2E4 \\uAC1C\\uC120 \\uC791\\uC5C5\\uC744 \\uD558\\uB2E4 \\uD574\\uB2F9 \\uC218\\uC5C5\\uC758 \\uC2DC\\uCCAD \\uC5EC\\uBD80\\uB97C \\uCCB4\\uD06C\\uD558\\uB294 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uC5D0\\uC11C \\uC0AC\\uC6A9\\uD55C \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mutate\"), \" \\uC758 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSuccess\"), \" \\uAC00 \\uC2E4\\uD589\\uB418\\uC9C0 \\uC54A\\uB294 \\uBC84\\uADF8\\uAC00 \\uBC1C\\uC0DD\\uD588\\uB2E4.\"), mdx(\"p\", null, \"\\uBB38\\uC81C\\uC758 \\uC6D0\\uC778\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mutate\"), \" \\uB97C \\uC0AC\\uC6A9\\uD55C \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 mutate \\uC131\\uACF5 \\uC774\\uD6C4\\uC5D0 \\uB9C8\\uC6B4\\uD2B8\\uB97C \\uD5E4\\uC81C\\uD558\\uB294 \\uB85C\\uC9C1\\uC73C\\uB85C \\uC791\\uC131\\uB418\\uC5B4 \\uC788\\uC5C8\\uB2E4.\"), mdx(\"p\", null, \"\\uD574\\uB2F9 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mutate\"), \" \\uD568\\uC218\\uB97C \\uBD80\\uBAA8\\uC5D0\\uC11C \\uC2E4\\uD589\\uD558\\uACE0, \\uC790\\uC2DD\\uD55C\\uD14C props \\uB85C \\uD574\\uB2F9 \\uD568\\uC218\\uB97C \\uB118\\uACA8\\uC8FC\\uB294 \\uBC29\\uC2DD\\uC73C\\uB85C \\uC791\\uC131\\uD558\\uB2C8 \\uD574\\uACB0\\uB418\\uC5C8\\uB2E4.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\ntitle: React Query\ntags:\n  - React\n---\n\n## 개요\n\n서버 상태와 클라이언트 상태를 분리한다.  \n클라이언트에서 관리하는 상태는 그렇게 많지 않다.\n\n## SSR\n\nqueryClient 에 데이터를 전달하는 방법을 사용\n\n- initialData 를 이용하는 방법\n\n## react-query 는 동시에 나가는 요청의 중복을 제거한다.  \n각각의 컴포넌트에서 useQuery 를 사용하더라도, 동일한 요청에 관해서는 중복을 제거한다.\n\n\n## useQuery 의 isFetching 과 isLoading 의 차이\n\n- isFetching\n    - 캐시된 데이터가 존재하는 상태\n    - query 함수가 아직 resolve 되지 않았다.\n- isLoading\n    - 캐시된 데이터가 없고 + isFetching\n\n\n## Stale Time 과 Cache Time 의 차이\n\n- A 쿼리 인스턴스가 mount 됨\n- 네트워크에서 데이터 fetch 하고 A라는 query key로 캐싱함\n- 이 데이터는 `fresh` 상태에서 `staleTime`(기본값 0) 이후 `stale` 상태로 변경됨\n- A 쿼리 인스턴스가 unmount 됨\n- 캐시는 `cacheTime`(기본값 5min) 만큼 유지되다가 가비지 콜렉터로 수집됨 → 이때 캐시된 데이터도 사라짐\n- 만일 `cacheTime`이 지나기 전에 A 쿼리 인스턴스가 새롭게 mount되면, fetch가 실행되고 `fresh`한 값을 가져오는 동안 캐시 데이터를 보여줌\n  \n\n### 상태별 특징\n\nfresh 상태에서는 아무리 새롭게 마운트를 해도 fetching 이 일어나지 않음\n\nfetching 은 데이터를 가져오는 중인 상태 → 캐시된 데이터가 있으면 그 데이터를 사용할 수 있음\n\n\n**Stale Time (기본값: 0)**\n\n데이터가 fresh 에서 stale 까지 걸리는 시간\n\n**Cache Time (기본값: 5min)**\n\n데이터가 inactive 상태에서 Cache Time 만큼 유지된 이후에 가비지 콜렉터로 수집된다.\n\n## Stale Time 이 0인 이유\n\n0으로 설정함으로써 서버에서 가져온 데이터가 항상 오래된 데이터라고 생각하는 것이 맞다.\n\n그래야지 항상 최신 상태를 유지할 수 있기 때문이다.\n\n## Pre Fetching\n\n좀 더 좋은 UX 를 보여주기 위해 다음에 가져올 데이터를 미리 가져오는 방법\n\nqueryClient 의 prefetchQuery 를 이용해서 다음 데이터를 미리 가져올 수 있다.\n\n```typescript\nuseEffect(()=>{\n  if(currentPage >= maxPostPage) {\n    return;\n  }\n  const nextPage = currentPage + 1;\n  queryClient.prefetchQuery([\"posts\",nextPage],()=> fetchPosts(nextPage))\n},[currentPage,queryClient])\n```\n\n## useQuery의 keepPreviousData\n\nuseQuery 의 `keepPreviousData` 옵션을 통해 쿼리키가 변경된 경우 새 데이터를 요청하는 동안 마지막으로 성공한 요청의 데이터를 사용할 수 있다.\n\n## Mutation\n\n네트워크 호출을 통해 서버의 값을 변경하는 것\n\n## useInfiniteQuery\n\n무한 스크롤 구현을 좀 더 편하게 해주는 쿼리 훅\n\n```jsx\nconst {\n  data: {\n    pages, // 실제 페이지 데이터 배열 [0, 1, 2, 3] 각각의 배열 인덱스에 맞춰서 데이터가 들어가 있음\n    pageParams // 다음 페이지 url 및 param 정보 -> getNextPageParam 의 리턴 값\n  }, \n  fetchNextPage, // 다음 페이지 fetching 하는 함수\n  hasNextPage, // 다음 페이지가 있는 경우 참\n  isLoading, // 로딩 시 참\n  isFetching, // 데이터 fetching 시 참\n  isError // 에러 발생시 참\n} = useInfiniteQuery(\n  [\"sw-people\"], ({pageParam = initialUrl}) => {\n    console.log(pageParam);\n    return fetchUrl(pageParam)\n  },\n  {\n    getNextPageParam: lastPage => lastPage.next || undefined\n  }\n)\n```\n\n## useIsFetching\n\nreact query 커스텀 훅으로 현재 queryClient 들의 isFetching 상태를 가져올 수있다.\n\n## Default Error Handling\n\n해당 프로젝트의 특성에 맞게 전역에서 에러를 핸들링\n\n```jsx\nnew QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 0,\n      onError: (error: unknown) => {\n        // error handling \n      },\n    },\n  },\n});\n```\n\n이렇게 등록하고 커스텀 해야하는 곳에서만 별도의 onError 를 설정\n\n## 데이터를 미리 채우는 메서드 및 옵션들\n\n|  | 어떻게 사용 | 어디서 오는 데이터? | 캐시가 되는지 |\n| --- | --- | --- | --- |\n| prefetchQuery | queryClient 의 메서드 | server | true |\n| setQueryData | queryClient 의 메서드 | client | true |\n| placeholderData | useQuery 의 옵션 | client | false |\n| initialData | useQuery 의 옵션 | client | true |\n\n## PrefetchQuery 를 이용해 미리 데이터 가져오기\n\n만약 80퍼센트의 유저가 홈페이지 방문후 강의 리스트 페이지로 간다면, \n\n홈페이지 컴포넌트에서 강의 리스트를 prefetch 해 놓는다.\n\n## select 를 통해 가져온 데이터 커스텀하기\n\nuseQuery 의 select 옵션을 통해 가져온 데이터를 커스텀할 수 있다.\n\n```jsx\n{ select: showAll ? undefined : selectFn }\n```\n\nundefined 시에는 현재 캐시 데이터를 그래도 반환하고, 함수가 등록된 경우에는 해당 함수의 리턴을 반환한다.\n\n## Re-fetching 을 하는 이유와 시점\n\n새로운 데이터를 서버로 부터 받아오기 위해서 특정 시점에 refetching 을 한다.\n\n시점\n\n- 새로운 쿼리 인스턴스가 마운트 될때\n- 리액트 컴포넌트가 mount 될때\n- 창이 포커싱 될때\n- 네트워크가 다시 연결 될때\n- refetchInterval 이 expired 될때\n    - polling\n    \n\n## Re-fetching 을 피하는 방법\n\n- staleTime 늘리기\n    - refetch 은 데이터가 stale 상태인 경우에만 요청하기 때문에 fresh 상태의 데이터를 오래 놔둔다.\n- refresch option 들 끄기\n    - 여러가지 refresh 옵션들이 존재하는데 이들을 끄면 된다.\n- 정말 한번 가져오면 정말 안가져와도 되는 데이터들은 조금 관리해줘도 괜찮을 것 같음\n\n## 전역 refetch option\n\nqueryClient에 설정가능\n\n```jsx\nnew QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 0,\n      onError: (error: unknown) => {\n        queryErrorHandler(error);\n      },\n      refetchOnMount: false,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n    },\n  },\n});\n```\n\n## queryClient.setQueryData\n\n쿼리 키 기반으로 클라이언트 캐시 데이터를 업데이트 시킨다. \n\n```jsx\nqueryClient.setQueryData(queryKey, updater)\n```\n\n## queryClient.getQueryData\n\n쿼리 키 기반으로 클라이언트 캐시 데이터를 반환한다. 제네릭으로 리턴하는 값의 타입을 지정할 수도 있다.\n\n## getQueryData VS useQuery  \n\n해당 Discussions 링크를 첨부한다.  \n[What is the best (or alternate) ways to fetch the server data from a child component when the parent component hits an api that returns all the data that we need?](https://github.com/tannerlinsley/react-query/discussions/1619)\n\n데이터가 필요한 컴포넌트에서 직접 useQuery 를 요청하는 것을 권장한다.\n\n## query 의 onSuccess 가 울리는 시점\n\n- queryClient 의 setQueryData\n- query 인스턴스 생성\n\n이로인해 알게된 사실은 모든 API fetching 을 useQuery 로만 해결하는 것이 아니라, api의 성공 응답에 setQueryData 를 해도 괜찮다.\n\n아래 예제 같은 경우에도 login, logout 하는 API 는 별도로 존재하고, 해당 API 의 성공 콜백에서 setQueryData 를 진행하였다.\n\n```jsx\nexport function useUser(): UseUser {\n  // TODO: call useQuery to update user data from server\n  const queryClient = useQueryClient();\n  const { data: user } = useQuery(queryKeys.user, () => getUser(user), {\n    onSuccess: (received: User | null) => {\n      console.log({ received });\n      if (!received) {\n        clearStoredUser();\n      } else {\n        setStoredUser(received);\n      }\n    },\n  });\n\n  // meant to be called from useAuth\n  function updateUser(newUser: User): void {\n    queryClient.setQueryData(queryKeys.user, 'hello');\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    queryClient.setQueryData(queryKeys.user, null);\n  }\n\n  return { user, updateUser, clearUser };\n}\n```\n\nupdateUser 를 실행시켰을 때 useQuery 의 onSuccess 콜백이 실행된다.\n\n## query 의 initialData 를 이용해서 쿼리 인스턴스의 초기 데이터를 셋팅한다.\n\ninitialData 는 일반 값 객체가 될 수도 있고, 함수 형태로 리턴 값을 넣을 수도 있다.\n\n[Initial Query Data](https://react-query.tanstack.com/guides/initial-query-data#using-initialdata-to-prepopulate-a-query)\n\n```jsx\nfunction Todo({ todoId }) {\n   const result = useQuery(['todo', todoId], () => fetch('/todos'), {\n     initialData: () => {\n       // Use a todo from the 'todos' query as the initial data for this todo query\n       return queryClient.getQueryData('todos')?.find(d => d.id === todoId)\n     },\n   })\n }\n```\n\ninitialData 에서 기존 queryClient 의 값을 가져와서 보여주는 것도 가능하다.\n\n## query 의 enabled 옵션을 이용해서 의존성 쿼리 인스턴스를 만든다.\n\n[https://react-query.tanstack.com/guides/dependent-queries](https://react-query.tanstack.com/guides/dependent-queries)\n\n```jsx\nconst{data: userAppointments = fallback}= useQuery(\n\t'user-appointments',\n\t()=> getUserAppointments(user),\n\t{\n\t\tenabled: !!user,\n\t},\n);\n```\n\n## queryClient 의 removeQueries 는 쿼리 인스턴스를 제거한다.\n\ndevtool 로 확인한 결과 쿼리 클라이언트 자체를 제거한다.\n\nsetQueryData null 과 removeQueries 와 동작이 비슷하지만, setQueryData 는 쿼리의 onSuccess 함수를 호출한다는 것에 의미가 있다.\n\n## mutation 전역 에러 헨들링\nquery 와 비슷하게 QueryClient 인스턴스를 생성하는 과정에서 전역 에러 핸들링을 추가할 수 있다.\n\n```typescript\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    ...,\n    mutations: {\n      onError: queryErrorHandler\n    }\n  }\n})\n```\n\n## 전역 mutation loading 은 `useIsMutating` 을 사용한다.\n\n```jsx\nexport function Loading(): ReactElement {\n\tconst isFetching = useIsFetching();\n  const isMutating = useIsMutating();\n\n  const display = isFetching || isMutating ? 'inherit' : 'none';\n  \n  return <Loading {display} />\n}\n\n```\n\n\n## useMutation 과 useQuery 의 차이점\n\n- 캐시 데이터가 없음 (no cache data)\n- 재시도가 없음 (no retries)\n- 재패치가 없음 (no refetch)\n- isFetching 이 없음 (캐시 데이터가 없기 때문에, 모든 로딩은 isLoading 으로 판별)\n- mutate 함수를 리턴하고 mutate 함수가 실행될 때 동작한다.\n- onMutate callback 존재\n\n## UseMutateFunction의 제네릭\n\n```jsx\nUseMutateFunction<TData, TError, TVariables, TContext>\n\nTData: mutate 의 리턴 타입\nTError: mutate 의 에러 타입\nTVariables: mutate 함수의 인자 타입\nTContext: onMutate 콜백의 인자 타입\n```\n\n## UseMutateFunction 사용 예시\n```typescript\nfunction useReserveAppointment(): UseMutateFunction<void, Error, Appointment, unknown> {\n  const { mutate } = useMutation((appointment: Appointment) => setAppointmentUser())\n\n  return mutate;\n}\n```\n\n## queryClient.invalidateQueries\n쿼리를 무효화 시켜 새로운 쿼리 데이터를 fetching 한다.\n\ninvalidateQueries 의 효과  \n- query 를 stale 상태로 만든다.\n- 만약 현재 렌더링 중이라면 re-fetch 한다.\n\n## Query Key Prefixes\nuseQuery 의 쿼리키의 기준 잘 설정해서, invalidateQueries 를 할떄 그룹핑하는 방법이 있다.\n\n예를 들어, 해당 mutate 성공 시 user 관련 쿼리들을 일괄 invalidateQueries 를 해야된다고 할때 유용하다.\n\n## onSuccess 로직에서 return 을 하면 await 처럼 동작한다.\n\nonSuccess 로직에서 return 을 사용하게 되면 await 를 건것처럼 동작하게 된다.\n```jsx\n{\n  {\n    onSuccess: () => {\n      return queryClient.refetchQueries('todos'); // 해당 refetch 가 성공했을 때 이후 로직이 수행된다.\n    }\n  }\n\n  {\n    onSuccess: () => {\n      queryClient.refetchQueries('todos'); // void 처럼 동작함\n    }\n  }\n}\n```\n\n\n## infiniteQuery 에서는 invalidateQueries 가 동작하지 않는 것 같다.\nmutate 이후에 onSuccess 로직에서 infiniteQuery 를 invalidate 해야하는 일이 있었다.\n(상세페이지에서 좋아요를 누르고, 다시 리스트 페이지로 이동한 경우)\n\n하지만 infiniteQuery 가 invalidate 상태로 변하지 않았다.\n\nhttps://github.com/tannerlinsley/react-query/discussions/1264\n\n쓰레드로 확인했을 때 제작자분은 되는게 정상이라고 하시는데, 나는 잘 되지 않았다.\n\n그래서 임시방편으로 refetchQueries 를 사용했다.\n\n\n## mutate 와 useMutation 에 onSuccess 로직\nmutation 이 성공했을때의 로직을 담을 수 있는 함수인 onSuccess 는 useMutation 의 세 번쨰 인자 or onSuccess 의 두 번째 인자로 넘길 수 있다. \n\n```js\n const {\n   mutate,\n } = useMutation(mutationFn, {\n   onSuccess,\n })\n \n mutate(variables, {\n   onSuccess: () => {\n\n   },\n })\n```\n\n## useMutation 의 동작\n**onMutate**\nmutation 이 시작하였을 때\nmutation 에서 return 하는 값은 해당 mutation 에서 context 로 참조가 가능하다.\n\n**onError**\n에러가 발생했을 때\n\n**onSuccess**\n성공했을 때\n\n**onSettled**\nmutation 이 끝났을 때, 성공 or 실패 에 상관없이 실행됨\n\n```jsx\nuseMutation(addTodo, {\n  onMutate: variables => {\n    return { id: 1 };\n  },\n  onError: (error, variables, context) => {\n    console.log(`에러 발생: ${context.id}`);\n  },\n  onSuccess: (data, variables, context) => {\n    console.log('성공');\n  },\n  onSettled: (data, error, variables, context) => {\n    console.log('mutation 끝남');\n  },\n});\n```\n\n## onSuccess 의 인자\n**data**\nAPI 응답 값\n\n**variables**\nmutate 함수 실행 인자\n\n**context**\nonMutate 함수에서 return 한 값\n\n\n```jsx\nonSuccess: (data, variables, context) => {\n  console.log('성공');\n}\n```\n## useQuery 사용시 isLoading 과 data 유무를 전부 확인해야한다.\n간혹 useQuery 를 사용할 때 단순히 isLoading 으로만 데이터 유무를 판단할 때가 있었다.\n\n```jsx\n\n\nconst { data, isLoading } = useQuery();\n\nif (isLoading) { // fetching 끝난후\n  return <div>Loading 중...</div>\n}\n\nreturn (\n  <div>{data?.hello}</div>\n)\n```\n\n이렇게 되는 경우 API 가 실패한 경우 해당 컴포넌트 에러가 발생한다.\n데이터를 fetching 하는 동안 isLoading 이 true 가 된다.\n\n이후 API 가 실패해서 데이터가 정상적으로 불러와지지 않은 상태에서 isLoading 은 false 가 되고, data는 undefined 가 된다.\n\n`data.hello` 에서 에러가 발생한다.\n\n따라서 isError 혹은 data 의 유무와 같은 적당한 분기가 필요하다.\n\n## Optimistic Updates\n직역하면 낙관적 업데이트로, 사용자의 요청이 오면 즉시 해당 UI 를 업데이트 시키고, 이후 서버의 응답으로 업데이트 혹은 UI 롤백을 시키는 방법이다.  \n좋아요를 눌렀을 때 사용하기 좋다.\n\n```jsx\nuseMutation(updateTodo, {\n  // mutate 실행\n  onMutate: async newTodo => {\n    // cancelQueries 를 통해 혹시 실행되고 있는 refetch 를 취소한다.\n    await queryClient.cancelQueries(['todos', newTodo.id])\n\n    // 기존 데이터 가져오기\n    const previousTodo = queryClient.getQueryData(['todos', newTodo.id])\n\n    // 낙관적 업데이트\n    queryClient.setQueryData(['todos', newTodo.id], newTodo)\n\n    // 해당 mutation 에서 사용할 context 리턴\n    return { previousTodo, newTodo }\n  },\n  // 에러 발생 시 기존에 업데이트 했던 데이터 되돌리기\n  // 이때 onMutate 에서 리턴한 값을 세번째 인자인 context 에서 사용할 수 있음\n  onError: (err, newTodo, context) => {\n    queryClient.setQueryData(\n      ['todos', context.newTodo.id],\n      context.previousTodo\n    )\n  },\n  // 성공 or 실패 이후에 쿼리 리패치\n  onSettled: newTodo => {\n    queryClient.invalidateQueries(['todos', newTodo.id])\n  },\n})\n```\n\n## setLogger\nreact query 에서 발생하는 로그를 setLogger 함수를 통해 커스텀할 수 있다.  \n사내에서는 윈스턴을 사용하니 전역적으로 설정하면 도움이 될 것 같다. \n\n```jsx\nimport { setLogger } from 'react-query'\nimport { printLog, printWarn, printError } from 'custom-logger'\n\n// Custom logger\nsetLogger({\n  log: printLog,\n  warn: printWarn,\n  error: printError,\n})\n\n// Winston logger\nsetLogger(winston.createLogger())\n```\n\n## Query Test 는 msw와 react-testing-library 를 사용한다.\njest 환경에서 msw 를 셋팅하여 테스트하면 실제 API 통신을 목킹할 수 있다.\n\nmsw 는 튜토리얼이 잘되어 있어 설치 및 작성 방법은 아래 공식문서를 참고한다.\nhttps://mswjs.io/\n\nmsw 에서 지정한 헨들러를 통해 테스트 코드에서 네트워크 통신을 목킹한다.\n\n**req**  \n요청, 요청에 관련된 정보가 담겨있는 object\n\n**res**  \n응답, mocked response 생성을 도와주는 함수\n\n**ctx**  \nstatus code 나 headers, body, 등등을 셋팅할 수 있는 인스턴스\n\n```js\nconst worker = setupWorker(\n  rest.post('/login', (req, res, ctx) => {  ctx   \n    const { username } = req.body\n    return res(\n      ctx.json({\n        username,\n        firstName: 'John'\n      })\n    )\n  }),\n)\n```\n\n## mutate 는 onSuccess 는 해당 컴포넌트가 마운트가 해제되면 울리지 않는다.\n\n[관련 링크](https://stackoverflow.com/questions/70662482/react-query-mutate-onsuccess-function-not-responding)\n\n강의실 개선 작업을 하다 해당 수업의 시청 여부를 체크하는 컴포넌트에서 사용한 `mutate` 의 `onSuccess` 가 실행되지 않는 버그가 발생했다.\n\n문제의 원인은 `mutate` 를 사용한 컴포넌트가 mutate 성공 이후에 마운트를 헤제하는 로직으로 작성되어 있었다.\n\n해당 `mutate` 함수를 부모에서 실행하고, 자식한테 props 로 해당 함수를 넘겨주는 방식으로 작성하니 해결되었다.\n\n\n\n","excerpt":"개요 서버 상태와 클라이언트 상태를 분리한다. 클라이언트에서 관리하는 상태는 그렇게 많지 않다. SSR queryClient 에 데이터를 전달하는 방법을 사용 initialData 를 이용하는 방법 react-query 는 동시에 나가는 요청의 중복…","outboundReferences":[],"inboundReferences":[]},"tagsOutbound":{"nodes":[{"frontmatter":{"title":"Next.js config","tags":["React","Nextjs","config"]},"fields":{"slug":"/programming/nextjs-config/","title":"Next.js config","lastUpdated":"2023. 1. 30.","lastUpdatedAt":"2023-01-30T13:09:08.000Z","gitCreatedAt":"2023-01-30T13:09:08.000Z"}},{"frontmatter":{"title":"React Query","tags":["React"]},"fields":{"slug":"/programming/react-query/","title":"React Query","lastUpdated":"2022. 9. 28.","lastUpdatedAt":"2022-09-28T23:51:06.000Z","gitCreatedAt":"2022-04-18T16:10:18.000Z"}},{"frontmatter":{"title":"Next.js","tags":["React","Nextjs"]},"fields":{"slug":"/programming/nextjs/","title":"Next.js","lastUpdated":"2023. 2. 14.","lastUpdatedAt":"2023-02-14T12:55:43.000Z","gitCreatedAt":"2022-10-18T00:11:40.000Z"}}]}},"pageContext":{"tags":["React"],"slug":"/programming/react-query/","sidebarItems":[{"title":"","items":[{"title":"Recently Updated","url":"/latest/","collapse":true,"indent":false,"items":[{"title":"06-23: 스타트업 개발자의 동기부여에 관한 독백","url":"/think/동기부여에 관한 독백/"},{"title":"06-23: 수요코딩회 ep.1 정리","url":"/programming/indongdang/ep1/"},{"title":"02-26: shaka fullscreen polyfill 코드 분석","url":"/programming/shaka-fullscreen-polyfill/"},{"title":"02-25: 크롬 개발자 도구 붙여넣기 오류","url":"/tips/chrome-allow-paste/"},{"title":"02-25: 전체 페이지에 걸려있는 이벤트 리스너 확인하기","url":"/tips/get-all-website-event-listeners/"},{"title":"02-21: Google Analytics 4 Debug View","url":"/analytics/google-analytics-4-debug-view/"},{"title":"02-21: shaka-player Error 4000","url":"/programming/shaka-player-error-4000/"},{"title":"02-21: shaka player using typescript","url":"/programming/shaka-player-typescript/"},{"title":"02-21: github actions 수동으로 트리거하기","url":"/tips/github-actions-workflow-dispatch/"},{"title":"02-20: Tree Shaking과 Dead Code Elimination","url":"/programming/tree-shaking-versus-dead-code-elimination/"}]}]},{"title":"Tags","items":[{"title":"IDE","type":"tag","url":"/tags/ide/","items":[{"title":"IntelliJ IDEA","url":"/ide/intellij/"},{"title":"Visual Studio Code","url":"/ide/vscode/"}]},{"title":"Nextjs","type":"tag","url":"/tags/nextjs/","items":[{"title":"Next.js config","url":"/programming/nextjs-config/"},{"title":"Next.js","url":"/programming/nextjs/"}]},{"title":"Raycast","type":"tag","url":"/tags/raycast/","items":[{"title":"Raycast","url":"/tips/raycast/"}]},{"title":"React","type":"tag","url":"/tags/react/","items":[{"title":"Next.js config","url":"/programming/nextjs-config/"},{"title":"React Query","url":"/programming/react-query/"},{"title":"Next.js","url":"/programming/nextjs/"}]},{"title":"Typescript","type":"tag","url":"/tags/typescript/","items":[{"title":"Typescript","url":"/programming/typescript/"}]},{"title":"Web","type":"tag","url":"/tags/web/","items":[{"title":"Tree Shaking","url":"/programming/tree-shaking/"}]},{"title":"analytics","type":"tag","url":"/tags/analytics/","items":[{"title":"hotjar","url":"/analytics/hotjar/"},{"title":"Google Analytics 4 Debug View","url":"/analytics/google-analytics-4-debug-view/"}]},{"title":"config","type":"tag","url":"/tags/config/","items":[{"title":"Next.js config","url":"/programming/nextjs-config/"},{"title":"rollup config","url":"/programming/rollup-config/"}]},{"title":"css","type":"tag","url":"/tags/css/","items":[{"title":"실무에서 배운 CSS 팁","url":"/programming/css-tip/"}]},{"title":"devtools","type":"tag","url":"/tags/devtools/","items":[{"title":"크롬 개발자 도구 붙여넣기 오류","url":"/tips/chrome-allow-paste/"},{"title":"전체 페이지에 걸려있는 이벤트 리스너 확인하기","url":"/tips/get-all-website-event-listeners/"}]},{"title":"error","type":"tag","url":"/tags/error/","items":[{"title":"내가 만난 에러","url":"/programming/meet-error/"}]},{"title":"github actions","type":"tag","url":"/tags/github-actions/","items":[{"title":"github actions 수동으로 트리거하기","url":"/tips/github-actions-workflow-dispatch/"}]},{"title":"google tag manager","type":"tag","url":"/tags/google-tag-manager/","items":[{"title":"Google Tag Mananger","url":"/programming/gtm/"}]},{"title":"javascript","type":"tag","url":"/tags/javascript/","items":[{"title":"Tree Shaking과 Dead Code Elimination","url":"/programming/tree-shaking-versus-dead-code-elimination/"}]},{"title":"kotlin","type":"tag","url":"/tags/kotlin/","items":[{"title":"Kotlin","url":"/programming/kotlin/"}]},{"title":"library","type":"tag","url":"/tags/library/","items":[{"title":"shaka fullscreen polyfill 코드 분석","url":"/programming/shaka-fullscreen-polyfill/"},{"title":"shaka-player Error 4000","url":"/programming/shaka-player-error-4000/"},{"title":"shaka player using typescript","url":"/programming/shaka-player-typescript/"}]},{"title":"polyfill","type":"tag","url":"/tags/polyfill/","items":[{"title":"shaka fullscreen polyfill 코드 분석","url":"/programming/shaka-fullscreen-polyfill/"}]},{"title":"rollup","type":"tag","url":"/tags/rollup/","items":[{"title":"rollup config","url":"/programming/rollup-config/"}]},{"title":"shaka-player","type":"tag","url":"/tags/shaka-player/","items":[{"title":"shaka fullscreen polyfill 코드 분석","url":"/programming/shaka-fullscreen-polyfill/"},{"title":"shaka-player Error 4000","url":"/programming/shaka-player-error-4000/"},{"title":"shaka player using typescript","url":"/programming/shaka-player-typescript/"}]},{"title":"strapi","type":"tag","url":"/tags/strapi/","items":[{"title":"Strapi","url":"/tips/strapi/"}]},{"title":"tip","type":"tag","url":"/tags/tip/","items":[{"title":"github actions 수동으로 트리거하기","url":"/tips/github-actions-workflow-dispatch/"},{"title":"Iterm2 에서 cmd + click 으로 Webstorm 코드 라인으로 이동하기","url":"/tips/iterm2-to-webstorm/"}]},{"title":"vite","type":"tag","url":"/tags/vite/","items":[{"title":"vite 라이브러리 모드에서 Invalid hook call 오류 발생","url":"/programming/vite-라이브러리-모드에서-invalid-hook-call/"}]},{"title":"youtube","type":"tag","url":"/tags/youtube/","items":[{"title":"한 번만 읽어도 책 내용 다 기억하는 기적의 독서 메모 법","url":"/memo/한 번만 읽어도 책 내용 다 기억하는 기적의 독서 메모 법/"}]},{"title":"독서","type":"tag","url":"/tags/독서/","items":[{"title":"Clean Code","url":"/book/Clean Code/"},{"title":"Five Lines of Code","url":"/book/Five Lines of Code/"},{"title":"개발자 원칙","url":"/book/개발자원칙/"},{"title":"모든 것이 되는 법","url":"/book/모든 것이 되는 법/"},{"title":"쏙쏙 들어오는 함수형 코딩","url":"/book/쏙쏙 들어오는 함수형 코딩/"},{"title":"오브젝트","url":"/book/오브젝트/"},{"title":"프레임워크 없는 프론트엔드 개발","url":"/book/프레임워크 없는 프론트엔드 개발/"}]},{"title":"링크","type":"tag","url":"/tags/링크/","items":[{"title":"유용한 링크 모음","url":"/memo/links/"}]},{"title":"메모","type":"tag","url":"/tags/메모/","items":[{"title":"한 번만 읽어도 책 내용 다 기억하는 기적의 독서 메모 법","url":"/memo/한 번만 읽어도 책 내용 다 기억하는 기적의 독서 메모 법/"}]},{"title":"발표","type":"tag","url":"/tags/발표/","items":[{"title":"개발만 잘하면 되는 줄 알았어요","url":"/think/개발만 잘하면 되는 줄 알았어요/"}]},{"title":"생각정리","type":"tag","url":"/tags/생각정리/","items":[{"title":"2022년 기록","url":"/memo/2022/"},{"title":"개발만 잘하면 되는 줄 알았어요","url":"/think/개발만 잘하면 되는 줄 알았어요/"},{"title":"스타트업 개발자의 동기부여에 관한 독백","url":"/think/동기부여에 관한 독백/"}]},{"title":"수요코딩회","type":"tag","url":"/tags/수요코딩회/","items":[{"title":"수요코딩회 ep.1 정리","url":"/programming/indongdang/ep1/"}]},{"title":"업무효율","type":"tag","url":"/tags/업무효율/","items":[{"title":"Jira","url":"/tips/jira/"}]},{"title":"웹 성능 최적화","type":"tag","url":"/tags/웹-성능-최적화/","items":[{"title":"웹 성능 최적화","url":"/programming/웹성능최적화/"}]},{"title":"이력서","type":"tag","url":"/tags/이력서/","items":[{"title":"조성륜 이력서","url":"/resume/resume/"}]},{"title":"일기","type":"tag","url":"/tags/일기/","items":[{"title":"2022년 기록","url":"/memo/2022/"}]},{"title":"테스트코드","type":"tag","url":"/tags/테스트코드/","items":[{"title":"프론트엔드 테스트","url":"/programming/frontend-test/"},{"title":"TDD","url":"/programming/tdd/"}]},{"title":"트러블슈팅","type":"tag","url":"/tags/트러블슈팅/","items":[{"title":"shaka-player Error 4000","url":"/programming/shaka-player-error-4000/"},{"title":"vite 라이브러리 모드에서 Invalid hook call 오류 발생","url":"/programming/vite-라이브러리-모드에서-invalid-hook-call/"}]},{"title":"회고","type":"tag","url":"/tags/회고/","items":[{"title":"2022년 기록","url":"/memo/2022/"},{"title":"개발만 잘하면 되는 줄 알았어요","url":"/think/개발만 잘하면 되는 줄 알았어요/"},{"title":"스타트업 개발자의 동기부여에 관한 독백","url":"/think/동기부여에 관한 독백/"}]}]}],"tagsGroups":[{"title":"IDE","type":"tag","url":"/tags/ide/","items":[{"title":"IntelliJ IDEA","url":"/ide/intellij/"},{"title":"Visual Studio Code","url":"/ide/vscode/"}]},{"title":"Nextjs","type":"tag","url":"/tags/nextjs/","items":[{"title":"Next.js config","url":"/programming/nextjs-config/"},{"title":"Next.js","url":"/programming/nextjs/"}]},{"title":"Raycast","type":"tag","url":"/tags/raycast/","items":[{"title":"Raycast","url":"/tips/raycast/"}]},{"title":"React","type":"tag","url":"/tags/react/","items":[{"title":"Next.js config","url":"/programming/nextjs-config/"},{"title":"React Query","url":"/programming/react-query/"},{"title":"Next.js","url":"/programming/nextjs/"}]},{"title":"Typescript","type":"tag","url":"/tags/typescript/","items":[{"title":"Typescript","url":"/programming/typescript/"}]},{"title":"Web","type":"tag","url":"/tags/web/","items":[{"title":"Tree Shaking","url":"/programming/tree-shaking/"}]},{"title":"analytics","type":"tag","url":"/tags/analytics/","items":[{"title":"hotjar","url":"/analytics/hotjar/"},{"title":"Google Analytics 4 Debug View","url":"/analytics/google-analytics-4-debug-view/"}]},{"title":"config","type":"tag","url":"/tags/config/","items":[{"title":"Next.js config","url":"/programming/nextjs-config/"},{"title":"rollup config","url":"/programming/rollup-config/"}]},{"title":"css","type":"tag","url":"/tags/css/","items":[{"title":"실무에서 배운 CSS 팁","url":"/programming/css-tip/"}]},{"title":"devtools","type":"tag","url":"/tags/devtools/","items":[{"title":"크롬 개발자 도구 붙여넣기 오류","url":"/tips/chrome-allow-paste/"},{"title":"전체 페이지에 걸려있는 이벤트 리스너 확인하기","url":"/tips/get-all-website-event-listeners/"}]},{"title":"error","type":"tag","url":"/tags/error/","items":[{"title":"내가 만난 에러","url":"/programming/meet-error/"}]},{"title":"github actions","type":"tag","url":"/tags/github-actions/","items":[{"title":"github actions 수동으로 트리거하기","url":"/tips/github-actions-workflow-dispatch/"}]},{"title":"google tag manager","type":"tag","url":"/tags/google-tag-manager/","items":[{"title":"Google Tag Mananger","url":"/programming/gtm/"}]},{"title":"javascript","type":"tag","url":"/tags/javascript/","items":[{"title":"Tree Shaking과 Dead Code Elimination","url":"/programming/tree-shaking-versus-dead-code-elimination/"}]},{"title":"kotlin","type":"tag","url":"/tags/kotlin/","items":[{"title":"Kotlin","url":"/programming/kotlin/"}]},{"title":"library","type":"tag","url":"/tags/library/","items":[{"title":"shaka fullscreen polyfill 코드 분석","url":"/programming/shaka-fullscreen-polyfill/"},{"title":"shaka-player Error 4000","url":"/programming/shaka-player-error-4000/"},{"title":"shaka player using typescript","url":"/programming/shaka-player-typescript/"}]},{"title":"polyfill","type":"tag","url":"/tags/polyfill/","items":[{"title":"shaka fullscreen polyfill 코드 분석","url":"/programming/shaka-fullscreen-polyfill/"}]},{"title":"rollup","type":"tag","url":"/tags/rollup/","items":[{"title":"rollup config","url":"/programming/rollup-config/"}]},{"title":"shaka-player","type":"tag","url":"/tags/shaka-player/","items":[{"title":"shaka fullscreen polyfill 코드 분석","url":"/programming/shaka-fullscreen-polyfill/"},{"title":"shaka-player Error 4000","url":"/programming/shaka-player-error-4000/"},{"title":"shaka player using typescript","url":"/programming/shaka-player-typescript/"}]},{"title":"strapi","type":"tag","url":"/tags/strapi/","items":[{"title":"Strapi","url":"/tips/strapi/"}]},{"title":"tip","type":"tag","url":"/tags/tip/","items":[{"title":"github actions 수동으로 트리거하기","url":"/tips/github-actions-workflow-dispatch/"},{"title":"Iterm2 에서 cmd + click 으로 Webstorm 코드 라인으로 이동하기","url":"/tips/iterm2-to-webstorm/"}]},{"title":"vite","type":"tag","url":"/tags/vite/","items":[{"title":"vite 라이브러리 모드에서 Invalid hook call 오류 발생","url":"/programming/vite-라이브러리-모드에서-invalid-hook-call/"}]},{"title":"youtube","type":"tag","url":"/tags/youtube/","items":[{"title":"한 번만 읽어도 책 내용 다 기억하는 기적의 독서 메모 법","url":"/memo/한 번만 읽어도 책 내용 다 기억하는 기적의 독서 메모 법/"}]},{"title":"독서","type":"tag","url":"/tags/독서/","items":[{"title":"Clean Code","url":"/book/Clean Code/"},{"title":"Five Lines of Code","url":"/book/Five Lines of Code/"},{"title":"개발자 원칙","url":"/book/개발자원칙/"},{"title":"모든 것이 되는 법","url":"/book/모든 것이 되는 법/"},{"title":"쏙쏙 들어오는 함수형 코딩","url":"/book/쏙쏙 들어오는 함수형 코딩/"},{"title":"오브젝트","url":"/book/오브젝트/"},{"title":"프레임워크 없는 프론트엔드 개발","url":"/book/프레임워크 없는 프론트엔드 개발/"}]},{"title":"링크","type":"tag","url":"/tags/링크/","items":[{"title":"유용한 링크 모음","url":"/memo/links/"}]},{"title":"메모","type":"tag","url":"/tags/메모/","items":[{"title":"한 번만 읽어도 책 내용 다 기억하는 기적의 독서 메모 법","url":"/memo/한 번만 읽어도 책 내용 다 기억하는 기적의 독서 메모 법/"}]},{"title":"발표","type":"tag","url":"/tags/발표/","items":[{"title":"개발만 잘하면 되는 줄 알았어요","url":"/think/개발만 잘하면 되는 줄 알았어요/"}]},{"title":"생각정리","type":"tag","url":"/tags/생각정리/","items":[{"title":"2022년 기록","url":"/memo/2022/"},{"title":"개발만 잘하면 되는 줄 알았어요","url":"/think/개발만 잘하면 되는 줄 알았어요/"},{"title":"스타트업 개발자의 동기부여에 관한 독백","url":"/think/동기부여에 관한 독백/"}]},{"title":"수요코딩회","type":"tag","url":"/tags/수요코딩회/","items":[{"title":"수요코딩회 ep.1 정리","url":"/programming/indongdang/ep1/"}]},{"title":"업무효율","type":"tag","url":"/tags/업무효율/","items":[{"title":"Jira","url":"/tips/jira/"}]},{"title":"웹 성능 최적화","type":"tag","url":"/tags/웹-성능-최적화/","items":[{"title":"웹 성능 최적화","url":"/programming/웹성능최적화/"}]},{"title":"이력서","type":"tag","url":"/tags/이력서/","items":[{"title":"조성륜 이력서","url":"/resume/resume/"}]},{"title":"일기","type":"tag","url":"/tags/일기/","items":[{"title":"2022년 기록","url":"/memo/2022/"}]},{"title":"테스트코드","type":"tag","url":"/tags/테스트코드/","items":[{"title":"프론트엔드 테스트","url":"/programming/frontend-test/"},{"title":"TDD","url":"/programming/tdd/"}]},{"title":"트러블슈팅","type":"tag","url":"/tags/트러블슈팅/","items":[{"title":"shaka-player Error 4000","url":"/programming/shaka-player-error-4000/"},{"title":"vite 라이브러리 모드에서 Invalid hook call 오류 발생","url":"/programming/vite-라이브러리-모드에서-invalid-hook-call/"}]},{"title":"회고","type":"tag","url":"/tags/회고/","items":[{"title":"2022년 기록","url":"/memo/2022/"},{"title":"개발만 잘하면 되는 줄 알았어요","url":"/think/개발만 잘하면 되는 줄 알았어요/"},{"title":"스타트업 개발자의 동기부여에 관한 독백","url":"/think/동기부여에 관한 독백/"}]}],"latestPosts":[{"fields":{"slug":"/think/동기부여에 관한 독백/","title":"스타트업 개발자의 동기부여에 관한 독백","lastUpdatedAt":"2024-06-23T05:34:55.000Z","lastUpdated":"2024. 6. 23."},"frontmatter":{"draft":false,"tags":["회고","생각정리"]}},{"fields":{"slug":"/programming/indongdang/ep1/","title":"수요코딩회 ep.1 정리","lastUpdatedAt":"2024-06-23T05:34:55.000Z","lastUpdated":"2024. 6. 23."},"frontmatter":{"draft":false,"tags":["수요코딩회"]}},{"fields":{"slug":"/programming/shaka-fullscreen-polyfill/","title":"shaka fullscreen polyfill 코드 분석","lastUpdatedAt":"2024-02-26T15:37:28.000Z","lastUpdated":"2024. 2. 26."},"frontmatter":{"draft":false,"tags":["library","shaka-player","polyfill"]}},{"fields":{"slug":"/tips/chrome-allow-paste/","title":"크롬 개발자 도구 붙여넣기 오류","lastUpdatedAt":"2024-02-25T14:29:01.000Z","lastUpdated":"2024. 2. 25."},"frontmatter":{"draft":false,"tags":["devtools"]}},{"fields":{"slug":"/tips/get-all-website-event-listeners/","title":"전체 페이지에 걸려있는 이벤트 리스너 확인하기","lastUpdatedAt":"2024-02-25T14:24:10.000Z","lastUpdated":"2024. 2. 25."},"frontmatter":{"draft":false,"tags":["devtools"]}},{"fields":{"slug":"/analytics/google-analytics-4-debug-view/","title":"Google Analytics 4 Debug View","lastUpdatedAt":"2024-02-21T15:57:52.000Z","lastUpdated":"2024. 2. 21."},"frontmatter":{"draft":false,"tags":["analytics"]}},{"fields":{"slug":"/programming/shaka-player-error-4000/","title":"shaka-player Error 4000","lastUpdatedAt":"2024-02-21T15:57:52.000Z","lastUpdated":"2024. 2. 21."},"frontmatter":{"draft":false,"tags":["library","shaka-player","트러블슈팅"]}},{"fields":{"slug":"/programming/shaka-player-typescript/","title":"shaka player using typescript","lastUpdatedAt":"2024-02-21T15:46:47.000Z","lastUpdated":"2024. 2. 21."},"frontmatter":{"draft":false,"tags":["library","shaka-player"]}},{"fields":{"slug":"/tips/github-actions-workflow-dispatch/","title":"github actions 수동으로 트리거하기","lastUpdatedAt":"2024-02-21T15:17:47.000Z","lastUpdated":"2024. 2. 21."},"frontmatter":{"draft":false,"tags":["tip","github actions"]}},{"fields":{"slug":"/programming/tree-shaking-versus-dead-code-elimination/","title":"Tree Shaking과 Dead Code Elimination","lastUpdatedAt":"2024-02-20T15:37:32.000Z","lastUpdated":"2024. 2. 20."},"frontmatter":{"draft":false,"tags":["javascript"]}}]}},
    "staticQueryHashes": ["2230547434","2320115945","3495835395","451533639"]}